Gemnote problem

Timing:
started: 305pm Thursday
first sample json written: 415pm
sample json done 440pm
reading about jsonb in postgres: 455pm
taking a break to do other stuff: 510pm

restarting: 300pm, Tuesday
researching nedb as an alternative to postgres for this challenge. Postgres is
probably preferable for production.
decision to keep postgres: 310pm
wrote and tested build_db in Makefile: 325pm
git init and commit
feathers generate app with default options, REST only





Requirements
- /products
  - GET returns a list of products
  - POST to create a new product

- /products/{product_id}
  - GET one product


Nice to have
- filter by category (separate db table)
  - /products?category={category_id}
- search by string
  - /products/search?q={string}
- caching. Probably elasticsearch?
- pagination
- versioning
  - use Accept header, not url

Potential DB implementations
- SQL
    - should use EAV model
    - easy to filter and parse data
    - data spread over many tables, fetching requires many joins.
    - more consistent
- NoSQL
    - scalable. Don't have column creep with more product types
    - reasons for current json format
      - a 'product' has many variants. Each variant can have its own pricing, descriptors, etc.
        -  eg. some chocolate bars can be more expensive
      - weight and dimensions have units, scalable to eventual internationalization


Current price tiers
https://www.gemnote.com/lookbook/the-north-face/440
50, 150, 300

https://www.gemnote.com/lookbook/tanner-goods/524
50, 150, 300

Misc
- both patagonia jacket urls link to black
- repeat of 'glass' in Kinto description
- made up category ids

TODO
- sku could be replaced with uuid because we don't actually need to extract any product data from it
- consider using a 'product_group' table and a 'product' table. Each variant becomes a row in the product table.
- investigate jsonb indexing in postgres.
-